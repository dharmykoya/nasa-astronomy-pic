{"version":3,"sources":["utils/helper.js","views/homePage/homepage.action.js","store/actionTypes/index.js","components/arrow/Arrow.js","components/loader/Loader.js","components/icon/Icon.js","views/homePage/HomePage.js","views/homePage/homepage.reducer.js","store/reducer/rootReducer.js","store/reducer/index.js","components/button/Button.js","components/imageCard/ImageCard.js","views/favouritesPage/FavouritePage.js","App.js","serviceWorker.js","index.js"],"names":["updateObject","oldObject","updatedObject","getTodayDate","today","Date","moment","format","getPrevDayDate","date","subtract","findImage","images","JSON","parse","localStorage","getItem","getImageFailed","error","type","toggleFavouriteImage","getImage","dispatch","a","undefined","axios","get","process","data","setItem","stringify","imageDetails","Arrow","props","side","handleClick","className","onClick","Loader","Icon","customClass","HomePage","useState","selectedDate","setSelectedDate","useDispatch","useSelector","state","image","loading","favouriteImages","useEffect","invalidImage","isFavourited","toggleFavoriteHandler","favImages","filter","newFavImages","length","response","message","imageTitle","imageDescription","loader","title","url","includes","explanation","find","prevDay","src","alt","onChange","e","target","value","max","nextDay","add","alert","initialState","getImageStart","getImageSuccess","action","rootReducer","combineReducers","middleware","thunk","Button","children","customClassName","clickHandler","ImageCard","FavouritePage","displayImages","map","index","key","removeItem","store","reducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","setupStore","getFavImages","App","to","path","exact","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.7fb4fc27.chunk.js","sourcesContent":["import moment from \"moment\";\n\nexport const updateObject = (oldObject, updatedObject) => {\n  return {\n    ...oldObject,\n    ...updatedObject\n  };\n};\n\nexport const getTodayDate = () => {\n  const today = new Date();\n  return moment(today).format(\"YYYY-MM-DD\");\n};\n\nexport const getNormalizedDate = date => moment(date).format(\"YYYY-MM-DD\");\n\nexport const getPrevDayDate = date =>\n  moment(date).subtract(1, \"day\").format(\"YYYY-MM-DD\");\n\nexport const getNextDayDate = date =>\n  moment(date).add(1, \"day\").format(\"YYYY-MM-DD\");\n\nexport const findImage = date => {\n  const images = JSON.parse(localStorage.getItem(\"images\")) || {};\n\n  if (!images[date]) {\n    return false;\n  }\n  return images[date];\n};\n\nexport const getFavImages = date => {\n  const images = JSON.parse(localStorage.getItem(\"favImages\")) || [];\n\n  if (images.length === 0) {\n    return false;\n  }\n  return images;\n};\n","import axios from \"axios\";\nimport {\n  GET_IMAGE_START,\n  GET_IMAGE_SUCCESS,\n  GET_IMAGE_FAILED,\n  TOGGLE_FAVORITE_IMAGE\n} from \"../../store/actionTypes\";\nimport { getPrevDayDate, findImage } from \"../../utils/helper\";\n\nconst getImageStart = () => {\n  return {\n    type: GET_IMAGE_START\n  };\n};\n\nconst getImageSuccess = imageDetails => {\n  return {\n    type: GET_IMAGE_SUCCESS,\n    imageDetails\n  };\n};\n\nconst getImageFailed = error => {\n  return {\n    type: GET_IMAGE_FAILED,\n    error\n  };\n};\n\nexport const toggleFavouriteImage = images => {\n  return {\n    type: TOGGLE_FAVORITE_IMAGE,\n    images\n  };\n};\n\nexport const getImage = date => async dispatch => {\n  try {\n    if (date === \"\" || date === undefined) {\n      date = getPrevDayDate();\n    }\n\n    dispatch(getImageStart());\n\n    const { data } = await axios.get(\n      `https://api.nasa.gov/planetary/apod?api_key=${process.env.REACT_APP_NASA_KEY}&date=${date}`\n    );\n\n    const images = JSON.parse(localStorage.getItem(\"images\")) || {};\n    images[date] = data;\n    localStorage.setItem(\"images\", JSON.stringify(images));\n\n    dispatch(getImageSuccess(data));\n  } catch (error) {\n    // const { data } = error.response;\n\n    dispatch(getImageFailed(\"Network/Invalid Image\"));\n  }\n};\n\nexport const toggleFavourite = date => async dispatch => {\n  try {\n    const image = findImage(date);\n\n    const favImages = JSON.parse(localStorage.getItem(\"favImages\")) || [];\n\n    const isFavourited = favImages.filter(image => image.date === date);\n\n    let newFavImages;\n\n    if (isFavourited.length > 0) {\n      newFavImages = favImages.filter(image => image.date !== date);\n    } else {\n      newFavImages = [...favImages, image];\n    }\n\n    localStorage.setItem(\"favImages\", JSON.stringify(newFavImages));\n\n    dispatch(toggleFavouriteImage(newFavImages));\n  } catch (error) {\n    const { data } = error.response;\n    dispatch(getImageFailed(data.message));\n  }\n};\n\nexport const deleteAllFav = () => async dispatch => {\n  try {\n    localStorage.removeItem(\"favImages\");\n\n    dispatch(toggleFavouriteImage([]));\n  } catch (error) {\n    const { data } = error.response;\n    dispatch(getImageFailed(data));\n  }\n};\n","export const GET_IMAGE_START = \"GET_IMAGE_START\";\nexport const GET_IMAGE_SUCCESS = \"GET_IMAGE_SUCCESS\";\nexport const GET_IMAGE_FAILED = \"GET_IMAGE_FAILED\";\n\nexport const TOGGLE_FAVORITE_IMAGE = \"TOGGLE_FAVORITE_IMAGE\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Arrow.css\";\n\nconst Arrow = props => {\n  const { side, handleClick } = props;\n  return (\n    <div className=\"navigate-btn\" onClick={handleClick}>\n      <i className={`fas fa-chevron-${side}`} />\n    </div>\n  );\n};\n\nArrow.propTypes = {\n  side: PropTypes.string,\n  handleClick: PropTypes.func\n};\n\nexport default Arrow;\n","import React from \"react\";\n\nimport \"./Loader.css\";\n\nconst Loader = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Icon.css\";\n\nconst Icon = props => {\n  const { customClass, handleClick } = props;\n  return <i className={customClass} onClick={handleClick}></i>;\n};\n\nIcon.propTypes = {\n  customClass: PropTypes.string,\n  handleClick: PropTypes.func\n};\n\nexport default Icon;\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getImage, toggleFavourite } from \"./homepage.action\";\nimport PropTypes from \"prop-types\";\nimport Arrow from \"../../components/arrow/Arrow\";\n\nimport \"./HomePage.css\";\nimport Loader from \"../../components/loader/Loader\";\nimport {\n  getPrevDayDate,\n  getNextDayDate,\n  getTodayDate\n} from \"../../utils/helper\";\nimport Icon from \"../../components/icon/Icon\";\n\nconst HomePage = props => {\n  const [selectedDate, setSelectedDate] = useState(getPrevDayDate);\n\n  const dispatch = useDispatch();\n\n  const { loading, imageDetails, error, favouriteImages } = useSelector(\n    state => state.image\n  );\n\n  useEffect(() => {\n    dispatch(getImage());\n  }, [dispatch]);\n\n  const selectDatehandler = e => {\n    const date = e.target.value;\n    setSelectedDate(date);\n    dispatch(getImage(date));\n  };\n\n  const navigatePrevDayHandler = () => {\n    const prevDay = getPrevDayDate(selectedDate);\n    setSelectedDate(prevDay);\n    dispatch(getImage(selectedDate));\n  };\n\n  const navigateNextDayHandler = () => {\n    const nextDay = getNextDayDate(selectedDate);\n    if (nextDay > getTodayDate()) {\n      alert(\"invalid\");\n      return;\n    }\n    setSelectedDate(nextDay);\n    dispatch(getImage(selectedDate));\n  };\n\n  const toggleFavoriteHandler = () => {\n    dispatch(toggleFavourite(selectedDate));\n  };\n\n  let imageTitle = \"...\";\n  let image;\n  let imageDescription = \"...\";\n  let loader = <Loader />;\n  let invalidImage;\n  if (!loading && imageDetails !== null) {\n    imageTitle = imageDetails.title;\n    image = imageDetails.url;\n\n    if (image.includes(\"youtube\")) {\n      invalidImage = \"invalid Image\";\n    }\n\n    imageDescription = imageDetails.explanation;\n  }\n\n  if (error) {\n    loader = error;\n  }\n\n  let isFavourited;\n  if (favouriteImages) {\n    isFavourited = favouriteImages.find(image => image.date === selectedDate);\n  }\n\n  return (\n    <section className=\"homepage mt-3\">\n      <div className=\"mb-3\">{imageTitle}</div>\n      <div className=\"row gallery-container\">\n        <Arrow side=\"left\" handleClick={navigatePrevDayHandler} />\n        <div>\n          <div>\n            {loading || error || invalidImage ? (\n              <div className=\"image loader-container\">\n                {loader || invalidImage}\n              </div>\n            ) : (\n              <img src={image} alt=\"current\" className=\"image img-fluid\" />\n              // <img\n              //   src=\"https://source.unsplash.com/250x182/?concert,party\"\n              //   alt=\"current\"\n              //   className=\"image img-fluid\"\n              // />\n            )}\n          </div>\n          <div className=\"row action-container mt-3\">\n            {isFavourited ? (\n              <Icon\n                customClass=\"fas fa-heart favourite\"\n                handleClick={toggleFavoriteHandler}\n              />\n            ) : (\n              <Icon\n                handleClick={toggleFavoriteHandler}\n                customClass=\"far fa-heart favourite\"\n              />\n            )}\n            {/* <Icon\n              handleClick={toggleFavoriteHandler}\n              customClass=\"far fa-heart favourite\"\n            /> */}\n            {/* <Icon customClass=\"fas fa-heart favourite\" /> */}\n            <input\n              type=\"date\"\n              onChange={selectDatehandler}\n              value={selectedDate}\n              max={getTodayDate()}\n            />\n          </div>\n        </div>\n\n        <Arrow side=\"right\" handleClick={navigateNextDayHandler} />\n      </div>\n      <div className=\"description-container\">{imageDescription}</div>\n    </section>\n  );\n};\n\nHomePage.propTypes = {\n  getImage: PropTypes.func\n};\n\nexport default HomePage;\n","import { updateObject } from \"../../utils/helper\";\nimport {\n  GET_IMAGE_START,\n  GET_IMAGE_SUCCESS,\n  GET_IMAGE_FAILED,\n  TOGGLE_FAVORITE_IMAGE\n} from \"../../store/actionTypes\";\n\nconst initialState = {\n  loading: false,\n  imageDetails: null,\n  favouriteImages: null,\n  error: null\n};\n\nconst getImageStart = state => {\n  return updateObject(state, {\n    loading: true\n  });\n};\n\nconst getImageSuccess = (state, action) => {\n  return updateObject(state, {\n    imageDetails: action.imageDetails,\n    loading: false,\n    error: null\n  });\n};\n\nconst getImageFailed = (state, action) => {\n  return updateObject(state, {\n    error: action.error,\n    loading: false\n  });\n};\n\nconst toggleFavouriteImage = (state, action) => {\n  return updateObject(state, {\n    favouriteImages: action.images,\n    loading: false\n  });\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_IMAGE_START:\n      return getImageStart(state, action);\n    case GET_IMAGE_SUCCESS:\n      return getImageSuccess(state, action);\n    case GET_IMAGE_FAILED:\n      return getImageFailed(state, action);\n    case TOGGLE_FAVORITE_IMAGE:\n      return toggleFavouriteImage(state, action);\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport homepageReducer from \"../../views/homePage/homepage.reducer\";\nconst rootReducer = combineReducers({\n  image: homepageReducer\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./rootReducer\";\n\nexport const middleware = [thunk];\n\nexport const setupStore = (reducer) => {\n  const composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  return createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(...middleware))\n  );\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Button = props => {\n  const { children, customClassName, clickHandler } = props;\n  return (\n    <button className={`btn ${customClassName}`} onClick={clickHandler}>\n      {children}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  btnName: PropTypes.string,\n  customClassName: PropTypes.string,\n  clickHandler: PropTypes.func\n};\n\nexport default Button;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./ImageCard.css\";\n\nconst ImageCard = props => {\n  const { image, title } = props;\n  let error;\n  if (image.includes(\"youtube\")) {\n    error = \"invalid Image\";\n  }\n  return (\n    <div className=\"gallery_product col-lg-4 col-md-4 col-sm-4 col-xs-6\">\n      {error ? (\n        <div className=\"fav-image-error\">{error}</div>\n      ) : (\n        <img\n          // src=\"https://source.unsplash.com/550x182/?concert,party\"\n          src={image}\n          alt=\"current\"\n          className=\"img-fluid fav-image\"\n        />\n      )}\n      <div className=\"fav-title\">{title}</div>\n    </div>\n  );\n};\n\nImageCard.propTypes = {\n  image: PropTypes.string,\n  title: PropTypes.string\n};\n\nexport default ImageCard;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Button from \"../../components/button/Button\";\n\nimport \"./FavouritePage.css\";\nimport ImageCard from \"../../components/imageCard/ImageCard\";\nimport { deleteAllFav } from \"../homePage/homepage.action\";\n\nconst FavouritePage = () => {\n  const dispatch = useDispatch();\n\n  const { favouriteImages } = useSelector(state => state.image);\n\n  const deleteAllFavouritesHandler = () => {\n    dispatch(deleteAllFav());\n  };\n\n  let displayImages = (\n    <div className=\"text-center\">No Favourite picture is available</div>\n  );\n  if (favouriteImages && favouriteImages !== null) {\n    displayImages = favouriteImages.map((image, index) => (\n      <ImageCard key={index} image={image.url} title={image.title} />\n    ));\n  }\n\n  return (\n    <section>\n      <div className=\"container\">\n        <Button\n          customClassName=\"btn-danger delete-fav mt-3 ml-auto\"\n          clickHandler={deleteAllFavouritesHandler}\n        >\n          Delete All\n        </Button>\n        <h3>My Favourites</h3>\n        <div className=\"row favourite-container mt-4\">{displayImages}</div>\n      </div>\n    </section>\n  );\n};\n\nFavouritePage.propTypes = {};\n\nexport default FavouritePage;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  useLocation,\n  Link\n} from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport HomePage from \"./views/homePage/HomePage\";\nimport { setupStore } from \"./store/reducer\";\nimport { getFavImages } from \"./utils/helper\";\nimport { toggleFavouriteImage } from \"./views/homePage/homepage.action\";\n\nimport \"./App.css\";\nimport FavouritePage from \"./views/favouritesPage/FavouritePage\";\n\nconst store = setupStore();\n\nif (localStorage.favImages) {\n  const images = getFavImages();\n  if (images) {\n    //dispatch fav images (persisting the store)\n    store.dispatch(toggleFavouriteImage(images));\n  }\n}\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Link to=\"./\" className=\"logo\">\n              Nasa Astronomy Pic\n            </Link>\n            <div className=\"ml-auto\">\n              <Link to=\"./favourites\">Favourites</Link>\n            </div>\n          </header>\n          <Switch>\n            <Route path=\"./\" exact>\n              <HomePage />\n            </Route>\n            <Route path=\"/favourite\" exact>\n              <FavouritePage />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}